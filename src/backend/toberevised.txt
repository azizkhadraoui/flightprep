app.get(process.env.REACT_APP_BACKEND_URL, async (req, res) => {
  const { mode, subject, subtopic, filters, userId } = req.query;

  // If mode is 'exam', return all questions
  if (mode === 'exam') {
    const allQuestions = await db.collection('questions')
      .where('subject', '==', subject)
      .where('subtopic', '==', subtopic)
      .get();
    res.json(allQuestions.docs.map(doc => doc.data()));
    return;
  }

  if (filterObj.previouslySeen) {
    questionsArray = questionsArray.filter(q => !userData.seenQuestions.includes(q.id));
  }
  if (filterObj.dont) {
    questionsArray = questionsArray.filter(q => !userData.dont.includes(q.id));
  }
  if (filterObj.pinned) {
    questionsArray = questionsArray.filter(q => userData.pinned.includes(q.id));
  }
  if (filterObj.greenFlagged) {
    questionsArray = questionsArray.filter(q => userData.greenFlagged.includes(q.id));
  }
  if (filterObj.yellowFlagged) {
    questionsArray = questionsArray.filter(q => userData.yellowFlagged.includes(q.id));
  }
  if (filterObj.redFlagged) {
    questionsArray = questionsArray.filter(q => userData.redFlagged.includes(q.id));
  }
  // Convert filters from string to object
  const filterObj = JSON.parse(filters);

  // Fetch user data from Firebase
  const userDoc = await firebase.firestore().collection('users').doc(userId).get();
  const userData = userDoc.data();

  // Use filters to modify the database query
  let query = db.collection('questions')
    .where('subject', '==', subject)
    .where('subtopic', '==', subtopic);

  const questions = await query.get();
  // Convert query snapshot to array of documents
  let questionsArray = questions.docs.map(doc => doc.data());

  // Apply Firebase-based filters
  if (filterObj.previouslySeen) {
    questionsArray = questionsArray.filter(q => !userData.seenQuestions.includes(q.id));
  }
  if (filterObj.dont) {
    questionsArray = questionsArray.filter(q => !userData.dont.includes(q.id));
  }
  if (filterObj.pinned) {
    questionsArray = questionsArray.filter(q => userData.pinned.includes(q.id));
  }
  if (filterObj.greenFlagged) {
    questionsArray = questionsArray.filter(q => userData.greenFlagged.includes(q.id));
  }
  if (filterObj.yellowFlagged) {
    questionsArray = questionsArray.filter(q => userData.yellowFlagged.includes(q.id));
  }
  if (filterObj.redFlagged) {
    questionsArray = questionsArray.filter(q => userData.redFlagged.includes(q.id));
  }
  // ...

  res.json(questionsArray);
});
